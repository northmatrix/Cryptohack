

# This file was *autogenerated* from the file main.sage
from sage.all_cmdline import *   # import sage library

_sage_const_16 = Integer(16); _sage_const_1331169830894825846283645180581 = Integer(1331169830894825846283645180581); _sage_const_35 = Integer(35); _sage_const_98 = Integer(98); _sage_const_479691812266187139164535778017 = Integer(479691812266187139164535778017); _sage_const_568535594075310466177352868412 = Integer(568535594075310466177352868412); _sage_const_1110072782478160369250829345256 = Integer(1110072782478160369250829345256); _sage_const_800079550745409318906383650948 = Integer(800079550745409318906383650948); _sage_const_1290982289093010194550717223760 = Integer(1290982289093010194550717223760); _sage_const_762857612860564354370535420319 = Integer(762857612860564354370535420319); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)# sage
import hashlib
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from sage.all import GF, EllipticCurve, ZZ, gcd


def decrypt_flag(shared_secret):
    iv = bytes.fromhex("eac58c26203c04f68d63dc2c58d79aca")
    ct = bytes.fromhex(
        "bb9ecbd3662d0671fd222ccb07e27b5500f304e3621a6f8e9c815bc8e4e6ee6ebc718ce9ca115cb4e41acb90dbcabb0d"
    )

    sha1 = hashlib.sha1()
    sha1.update(str(shared_secret).encode("ascii"))
    key = sha1.digest()[:_sage_const_16 ]
    cipher = AES.new(key, AES.MODE_CBC, iv)

    pt = unpad(cipher.decrypt(ct), _sage_const_16 )
    return pt


p = _sage_const_1331169830894825846283645180581 
a = -_sage_const_35 
b = _sage_const_98 

E = EllipticCurve(GF(p), [a, b])
G = E((_sage_const_479691812266187139164535778017 , _sage_const_568535594075310466177352868412 ))
Alice = E((_sage_const_1110072782478160369250829345256 , _sage_const_800079550745409318906383650948 ))
Bob = E((_sage_const_1290982289093010194550717223760 , _sage_const_762857612860564354370535420319 ))

order = G.order()
k = _sage_const_1 
while (p**k - _sage_const_1 ) % order:
    k += _sage_const_1 

Ee = EllipticCurve(GF(p ** k, "y"), [a, b])
Ge = Ee(G)
Ae = Ee(Alice)

T = Ee.random_point()
M = T.order()
d = gcd(M, G.order())
Q = (M // d) * T

assert G.order() / Q.order() in ZZ

N = G.order()

a = Ge.weil_pairing(Q, N)
b = Ae.weil_pairing(Q, N)

na = b.log(a)
assert na * G == Alice

priv_key = (na * Bob).xy()[_sage_const_0 ]

print(decrypt_flag(priv_key))

